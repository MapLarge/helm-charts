{{- $configMapName := include "maplarge.configMapName" . -}}
{{- $pullSecretName := include "maplarge.pullSecretName" . -}}
{{- $rootPasswordSecretName := include "maplarge.rootPasswordSecretName" . -}}
{{- $configDirectory := default "/opt/maplarge/config" .Values.configurationDirectory }}
{{- $clusterConfigJson := include "maplarge.clusterConfigJson" . }}
{{- $persistConfigurationInitCommand := printf "if [[ -f /opt/maplarge/App_Data/config/cluster.json ]]; then echo cluster.json exists already nothing to do; else mkdir -p /opt/maplarge/App_Data/config && echo %s > /opt/maplarge/App_Data/config/cluster.json ; fi" $clusterConfigJson | toString | trim | quote }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "maplarge.fullname" . }}
  labels:
    app.kubernetes.io/name: {{ .Release.Name | quote }}
    application: {{ .Release.Name | quote }}
    app.kubernetes.io/component: maplarge-api-server
    app.kubernetes.io/part-of: {{ include "maplarge.name" . }}
    {{- include "maplarge.labels" . | nindent 4 }}
spec:
  {{- if .Values.autoscaling }}
  {{- if .Values.autoscaling.enabled }}
  {{- end }}
  {{- else}}
  replicas: {{ max 0 .Values.replicas }}
  {{- end }}
  podManagementPolicy: {{ .Values.podManagementPolicy | quote }}
  revisionHistoryLimit: {{ .Values.revisionHistoryLimit }}
  serviceName: {{ include "maplarge.headlessServiceName" . }}
  selector:
    matchLabels:
      {{- include "maplarge.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum | trunc 63 }}
    {{- with .Values.podAnnotations }}
        backup.velero.io/backup-volumes: app-data
        {{- toYaml . | nindent 8 }}
    {{- end }}
      labels:
        {{- include "maplarge.labels" . | nindent 8 }}
        {{- if .Values.team }}
        maplarge.com/project: {{ .Values.team | quote }}
        {{- end }}
        application: {{ .Release.Name | quote }}
        app.kubernetes.io/name: {{ .Release.Name | quote }}
        app.kubernetes.io/component: maplarge-api-server
        app.kubernetes.io/part-of: {{ include "maplarge.name" . }}
    spec:
      serviceAccountName: {{ include "maplarge.serviceAccountName" . }}
      {{- if $pullSecretName }}
      imagePullSecrets:
        - name: "{{ $pullSecretName }}"
      {{- end }}
      {{- if .Values.podSecurityContext }}
      securityContext: {{- toYaml .Values.podSecurityContext | trim | nindent 8 }}
      {{- end }}
      {{- if or (.Values.persistConfiguration) (.Values.preloadMLData.enabled) }}
      initContainers:
        {{- if (.Values.persistConfiguration) }}
        - name: {{ printf "init-%s" .Chart.Name }}
          image: {{ default "busybox:1.28" .Values.initContainerImage }}
          command:
            - 'sh'
            - '-c'
            - {{ $persistConfigurationInitCommand }}
          volumeMounts:
            - mountPath: /opt/maplarge/App_Data
              {{- include "maplarge.pvcName" . | indent 14 }}
        {{- end }}
        {{- if (.Values.preloadMLData.enabled) }}
        - name: {{ printf "mldata-%s" .Chart.Name }}
          image: "{{ .Values.preloadMLData.image.repository }}:{{ .Values.preloadMLData.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.preloadMLData.image.pullPolicy }}
          volumeMounts:
            - mountPath: /data
              {{- include "maplarge.pvcName" . | indent 14 }}
          command:
            - 'rsync'
            - '-rv'
            - '--delete'
            - '/opt/maplarge/App_Data/'
            - '/data'
        {{- end }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
        {{- if .Values.securityContext }}
          securityContext: {{- (toYaml .Values.securityContext | trim | nindent 12) }}
        {{- end }}
          env:
          - name: ML_ROOT_PASS
            valueFrom:
              secretKeyRef:
                name: {{ $rootPasswordSecretName }}
                key: rootPassword
          - name: ML_REPL_ENABLED
            value: "false"
          - name: ML_CLIENT_CONFIG_ENABLE_CORS
            value: "true"
          - name: ML_CORS_ALLOWED_ORIGINS
            value: '%'
          {{- if not .Values.persistConfiguration }}
          - name: ML_CONFIG_DIR
            value: {{ $configDirectory }}
          {{- end }}
          {{- if or .Values.jsjs .Values.notebooks.jsjs }}
          - name: ML_CLIENT_CONFIG_JS_JS_PATH
            value: /opt/maplarge/config/js.js
          {{- end }}
          {{- if .Values.authPlugin.enabled }}
          - name: ML_AUTH_PLUGIN
            value: {{ .Values.authPlugin.typeName | quote }}
          {{- end }}
          {{- if .Values.ingress.enabled }}
          - name: ML_CLIENT_CONFIG_SERVER_HOSTNAME
            value: {{ include "maplarge.hostname" . }}
          {{- end }}
          {{- if .Values.ingress.enabled }}
          - name: ML_CLIENT_CONFIG_PREFIX_COUNT
            value: {{ (index .Values.ingress.hosts 0).prefixes | quote }}
          {{- end }}
          - name: ML_USE_TRANSACTIONAL_DATABASE
            value: {{ .Values.useTransactionalDatabase | quote }}
          {{- if .Values.authPlugin.enabled }}
          - name: ml_cfg_authPluginParams
            value: {{ printf "config=/opt/maplarge/config/%s" .Values.authPlugin.filename }}
          {{- end }}
          {{- if .Values.environmentVariables }}
          {{- (toYaml .Values.environmentVariables | nindent 10) }}
          {{- end }}
          {{- if .Values.extraEnvironmentVariables }}
          {{- (toYaml .Values.extraEnvironmentVariables | nindent 10) }}
          {{- end }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - containerPort: {{ default "80" .Values.service.targetPort }}
              protocol: TCP
              name: http
          {{- if .Values.lte.enabled }}
            - containerPort: 50595
              protocol: TCP
            - containerPort: 50597
              protocol: TCP
          {{- end }}
          {{- if .Values.startupProbe }}
          startupProbe:
          {{- toYaml .Values.startupProbe | nindent 12 }}
          {{- end }}
          {{- if .Values.livenessProbe }}
          livenessProbe:
            {{- toYaml .Values.livenessProbe | nindent 12 }}
          {{- end }}
          {{- if .Values.readinessProbe }}
          readinessProbe:
            {{- toYaml .Values.readinessProbe | nindent 12 }}
          {{- end }}
          {{- if .Values.resources }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          {{- end }}
          terminationMessagePath: {{ .Values.terminationMessagePath | quote }}
          terminationMessagePolicy: {{ .Values.terminationMessagePolicy | quote }}
          volumeMounts:
          - mountPath: /opt/maplarge/App_Data
            {{- include "maplarge.pvcName" . | indent 12 }}
          {{- if not .Values.persistConfiguration }}
          - mountPath: {{ printf "%s/cluster.json" $configDirectory }}
            name: config
            subPath: cluster.json
          {{- if .Values.config }}
          - mountPath: {{ printf "%s/config.json" $configDirectory }}
            name: config
            subPath: config.json
          {{- end }}
          {{- if .Values.interClusterConfigJson }}
          - mountPath: {{ printf "%s/interclusterConfig.json" $configDirectory }}
            name: config
            subPath: interclusterConfig.json
          {{- end }}
          {{- end }}
          {{- if .Values.authPlugin.enabled }}
          - mountPath: {{ printf "%s/%s" $configDirectory .Values.authPlugin.filename }}
            name: config
            subPath: {{ .Values.authPlugin.filename }}
          {{- end }}
          {{- if or (.Values.jsjs.value) (and .Values.notebooks.enabled .Values.notebooks.jsjs) }}
          - mountPath: {{ printf "%s/js.js" $configDirectory }}
            name: config
            subPath: js.js
          {{- end }}
          {{- if  or .Values.license.license .Values.license.existingSecretName }}
          - mountPath: /opt/maplarge/server/_maplarge_license.lic
            name: {{ include "maplarge.licenseName" . }}
            subPath: _maplarge_license.lic
          {{- end }}
          {{- if .Values.extraVolumeMounts }}
          {{- with .Values.extraVolumeMounts }}
          {{- toYaml . | nindent 10 }}
          {{- end }}
          {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if or (.Values.simpleNodeAffinityRequirements) (.Values.simpleNodeAffinityPreferences) (.Values.nodeAffinityPreferences) (.Values.nodeAffinityRequirements) (.Values.preferNodeAntiAffinity) (.Values.requireNodeAntiAffinity) }}
      affinity:
      {{- if or (.Values.simpleNodeAffinityRequirements) (.Values.simpleNodeAffinityPreferences) (.Values.nodeAffinityPreferences) (.Values.nodeAffinityRequirements) }}
        nodeAffinity:
          {{- if or (.Values.simpleNodeAffinityRequirements) (.Values.nodeAffinityRequirements) }}
          requiredDuringSchedulingIgnoredDuringExecution:
          {{- if .Values.nodeAffinityRequirements }}
          {{- with .Values.nodeAffinityRequirements }}
            nodeSelectorTerms:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- else if .Values.simpleNodeAffinityRequirements }}
            nodeSelectorTerms:
            {{- range .Values.simpleNodeAffinityRequirements }}
            - matchExpressions:
              - key: {{ . }}
                operator: Exists
            {{- end }}
          {{- end }}
          {{- end }}
          {{- if or (.Values.simpleNodeAffinityPreferences) (.Values.nodeAffinityPreferences) }}
          preferredDuringSchedulingIgnoredDuringExecution:
          {{- if .Values.nodeAffinityPreferences }}
          {{- with .Values.nodeAffinityPreferences }}
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- else if .Values.simpleNodeAffinityPreferences }}
            nodeSelectorTerms:
            {{- range .Values.simpleNodeAffinityPreferences }}
            - matchExpressions:
              - key: {{ . }}
                operator: Exists
            {{- end }}
          {{- end }}
          {{- end }}
      {{- end }}
      {{- if .Values.requireNodeAntiAffinity }}
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
                - key: "application"
                  operator: In
                  values:
                  - {{ include "maplarge.fullname" . | quote }}
            topologyKey: "kubernetes.io/hostname"
      {{- else if .Values.preferNodeAntiAffinity }}
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 50
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: "application"
                  operator: In
                  values:
                  - {{ include "maplarge.fullname" . | quote }}
              topologyKey: "kubernetes.io/hostname"
      {{- end }}
      {{- end }}
      {{- if or (.Values.tolerations) (.Values.simpleTolerations) }}
      tolerations:
      {{- if .Values.tolerations }}
      {{- with .Values.tolerations }}
        {{- toYaml . | nindent 8 }}
      {{- end}}
      {{- else }}
      {{- range .Values.simpleTolerations }}
        - key: {{ . | quote }}
          operator: "Exists"
      {{- end }}
      {{- end }}
      {{- end }}
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      volumes:
        - name: config
          configMap:
            name: {{ $configMapName | quote }}
        {{- if  or .Values.license.license .Values.license.existingSecretName }}
        - name: {{ include "maplarge.licenseName" . }}
          secret:
            secretName: {{ include "maplarge.licenseName" . }}
        {{- end }}
        {{- if .Values.extraVolumes }}
        {{- with .Values.extraVolumes }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        {{- end }}
  updateStrategy:
    type: {{ .Values.updateStrategyType | quote }}
    {{- if .Values.rollingUpdatePartition }}
    rollingUpdate:
      partition: 0
    {{- end}}
  volumeClaimTemplates:
    - metadata:
        {{- include "maplarge.pvcName" . | indent 8 }}
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: {{ .Values.appDataVolumeSizeInGB }}Gi
        storageClassName: {{ .Values.appDataVolumeStorageClassName }}
        volumeMode: Filesystem